const MathX = (function () {
    // Использую замыкание для создания приватной вспомогательной функции
    // Функция для определения, является ли число простым
    function isPrime(num) {
        // Если число меньше или равно 1, оно не является простым
        if (num <= 1) return false;
        // Если число меньше или равно 3, оно является простым
        if (num <= 3) return true;
        // Если число делится на 2 или 3 без остатка, оно не является простым
        if (num % 2 === 0 || num % 3 === 0) return false;
        // Проверка на деление числа на числа вида 6k ± 1 (оптимизация, тк уже исключили числа, которые делятся на 2 и 3, таким образом исключаем лишний перебор)
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        // Если все проверки пройдены, число считается простым
        return true;
    }

    return {
        //Функция для нахождения числа Фибоначчи через рекурсию (очень ресурсозатратно, при значениях n>40 лучше не использовать)
        fibN1: function (n) {
            return n <= 1 ? n : this.fibN1(n - 1) + this.fibN1(n - 2);
        },
        //Функция для нахождения числа Фибоначчи последовательно в цикле (работает адекватно быстро даже при больших значениях)
        fibN2: function (n) {
            if (n <= 0) return 0; //Первое число Фибоначчи
            if (n === 1) return 1; //Второе число Фибоначчи

            let prev = 0; //Первое число Фибоначчи
            let current = 1; //Второе число Фибоначчи

            for (let i = 3; i <= n; i++) { //в цикле собираем сумму всех предыдущих чисел Фибоначчи
                let next = prev + current; //сумма двух предыдущих чисел фибоначи
                prev = current; //"двигаем" значение "первого" числа fib(n-2)
                current = next;// сумма это теперь "второе" число fib(n-1)
            }
            return current;
        },
        // Функция для вычисления всех чисел в ряду Фибоначчи до числа N
        fibToN: function (n) {
            // Если N меньше или равно 0, возвращаем пустой массив
            if (n <= 0) return [];
            // Если N равно 1, возвращаем массив с одним элементом - 0
            if (n === 1) return [0];

            const series = [0, 1]; // Массив для хранения чисел Фибоначчи

            // Начиная с третьего числа, добавляем числа Фибоначчи до тех пор,
            // пока следующее число не станет больше или равно N
            for (let i = 2; series[i - 1] + series[i - 2] <= n; i++) {
                // Вычисляем следующее число Фибоначчи и добавляем его в массив
                series.push(series[i - 1] + series[i - 2]);
            }

            // Возвращаем массив всех чисел Фибоначчи до числа N
            return series;
        },
        // Функция для вычисления N-го простого числа
        primeN: function (n) {
            // Если N меньше или равно 0, возвращаем undefined
            if (n <= 0) return undefined;
            let count = 0; // Счетчик найденных простых чисел
            let num = 2; // Текущее число для проверки на простоту
            while (count < n) {
                // Если текущее число является простым
                if (isPrime(num)) {
                    count++; // Увеличиваем счетчик найденных простых чисел
                    if (count === n) {
                        // Если найдено N-ное простое число, возвращаем его
                        return num;
                    }
                }
                num++; // Переходим к следующему числу для проверки
            }
        },
        // Функция для вычисления всех простых чисел до числа N
        primeToN: function (n) {
            // Если N меньше или равно 1, возвращаем пустой массив, так как нет простых чисел меньше или равных 1
            if (n <= 1) return [];
            const primes = []; // Массив для хранения найденных простых чисел
            // Перебираем числа от 2 до N
            for (let num = 2; num <= n; num++) {
                // Если текущее число является простым
                if (isPrime(num)) {
                    // Добавляем его в массив простых чисел
                    primes.push(num);
                }
            }
            // Возвращаем массив всех простых чисел до числа N
            return primes;
        }
    };
})();

// Проверка
console.log(MathX.fibN2(32)); // Выведет 1346269 по таблице (https://tab.wikimassa.org/tablitsa_chisel_fibonachchi_200)
console.log(MathX.fibToN(128)); // Выведет [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
console.log(MathX.primeN(16)); // Выведет 53 по таблице (https://tab.wikimassa.org/tablitsa_prostykh_chisel_do_100)
console.log(MathX.primeToN(526)); // Выведет [2, 3, 5, 7, 11, 13, 17, 19]